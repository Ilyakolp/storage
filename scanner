#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
struct Sign 
{
	int size;
	unsigned char* s;
	size_t dis;
};
struct Symbol
{
	char sym;
	Symbol* prev;
	Symbol* next;
};
int SIZE_OF_FILE(FILE* F, int* n)
{
	int r;
	r = fseek(F, 0, SEEK_END);
	if (r == -1)
	{
		printf("Error4.3");
		return(4);
	}
	r = ftell(F);
	if (r == -1)
	{
		printf("Error7.3");
		return(7);
	}
	*n = r;
	return(0);
}
int READSIGN(char *pathname,int *am, Sign*& B)
{
	FILE* SF;
	size_t i,j;
	int amos,r;
	Sign* Datab;
	//char* path = pathname;
	printf("%s", pathname);
	errno = 0;
	SF = fopen(pathname, "r");
	if (SF == NULL)
	{
		printf("Error1.1!!\n%d\n",errno);
		return(1);
	}
	r=fscanf(SF, "%d", &amos);
	if (r < 0)
	{
		printf("Error2.1\n");
		return(2);
	}
	*am = amos;
    Datab = (Sign*)malloc(amos * sizeof(Sign));
	if (Datab == NULL)
	{
		printf("Error1.1\n");
		return(1);
	}
	for (i = 0; i < amos; i++)
	{
		r=fscanf(SF, "%d", &Datab[i].size);
    if (r < 0)
	{
		printf("Error2.1\n");
		return(2);
	}
		Datab[i].s = (unsigned char*)malloc(Datab[i].size * sizeof(unsigned char));
		for (j = 0; j < Datab[i].size; j++)
		{
			r=fscanf(SF, "%hhx", &Datab[i].s[j]);
			if (r < 0)
			{
				printf("Error2.1\n");
				return(2);
			}
		}
		r=fscanf(SF, "%zu", &Datab[i].dis);
		if (r < 0)
		{
			printf("Error2.1\n");
			return(2);
		}
	}
	B = Datab;
	r=fclose(SF);
	if (r!=0)
	{
		printf("Error3.1\n");
		return(3);
	}
	return(0);
}
int VERIFICATION(char *pathname,int amos, Sign* B)
{
	FILE* V;
	size_t i, j,res; 
	int inf = 0;
	char n[2];
	unsigned char* buf;
	int r,sizeoffile;
	V = fopen(pathname, "rb");
	if (V == NULL)
	{
		printf("Error1.2\n");
		return(1);
	}
	r = SIZE_OF_FILE(V, &sizeoffile);
	if (r !=0)
	{
		printf("SIZE_OF_FILE Error\n");
		return(10);
	}
	r=fseek(V, 0, SEEK_SET);
	if (r == -1)
	{
		printf("Error4.2\n");
		return(4);
	}
	res=fread(n, 2, 1, V);
	if (res<0)
	{
		printf("Error5.2\n");
		return(5);
	}
	if (n[0] != 'M' || n[1] != 'Z')
	{
		printf("The file you want to verify is not an exe file\n");
		return(0);
	}
	for (i = 0; i < amos; i++)
	{
		if (B[i].dis > sizeoffile-B[i].size)
		{
			continue;
		}
		r = fseek(V, B[i].dis, SEEK_SET);
		if (r == -1)
		{
			printf("Error4.2\n");
			return(4);
		}
		buf = (unsigned char*)malloc(B[i].size * sizeof(unsigned char));
		if (buf == NULL)
		{
			printf("Error1.2\n");
			return(1);
		}
		res = fread(buf, 1, B[i].size, V);
		if (res < 0)
		{
			printf("Error5.2\n");
			return(5);
		}
		r = memcmp(buf, B[i].s, B[i].size);
		if (r == 0)
		{
			inf = 1;
			r=printf("The following signature was found: ");
			if (r < 0)
			{
			printf("Error6.2\n");
			return(6);
			}
			for (j = 0; j < B[i].size; j++)
			{
				r=printf("%hhx ", B[i].s[j]);
			if (r < 0)
			{
			printf("Error6.2\n");
			return(6);
			}

			}
			return(0);
		}
		free(buf);
	}
	if (inf == 0)
	{
		r=printf("The file is clean\n");
		if (r < 0)
		{
			printf("Error6.2\n");
			return(6);
		}

	}
	for (i = 0; i < amos; i++)
	{
		free(B[i].s);
	}
	free(B);
	r = fclose(V);
	if (r!=0)
	{
			printf("Error3.2\n");
			return(3);
	}
	return(0);
}
int ENDLESS_STRING(char*&name)
{
	size_t i, count=0;
	Symbol* current, *back, *top;
	char elem=0;
	back=(Symbol*)malloc(sizeof(Symbol));
	if (back == NULL)
	{
		printf("Error 1.4");
		return(1);
	}
	top = back;
	while (elem != '\n')
	{
		count++;
		elem = getchar();
		if (elem == EOF)
		{
			printf("Error 8.4");
			return(8);
		}
		top->sym = elem;
		current=(Symbol*)malloc(sizeof(Symbol));
		if (current == NULL)
		{
			printf("Error 1.4");
			return(1);
		}
		top->next = current;
		current->prev = top;
		top = current;
	} 
	current = back;
	name = (char*)malloc((count+1)* sizeof(char));
	if (name == NULL)
	{
		printf("Error 1.4");
		return(1);
	}
	for (i = 0; i < count+1; i++)
	{
		if (i == count)
		{
			name[i] = '\0';
		}
		else
		{
			name[i] = current->sym;
			current = current->next;
		}
	}
	return(0);
}
int main()
{
	Sign *Database;
	int r,amos;
	char *sf,*v;
	size_t i,j;
	r=printf("Enter the path to the file containing signatures\nPress 'Enter' on readiness\n");
	if (r < 0)
	{
		printf("Error main6\n");
		return(6);
	}
	r = ENDLESS_STRING(sf);
	if (r != 0)
	{
		printf("Error ENDLESS_STRING\n");
		return(7);
	}
	/*for (i = 0; i < 40; i++)
	{
		printf("%c", sf[i]);
	}*/
	/*r=scanf("%[^\n]s",sf);
    if (r < 0)
	{
		printf("Error main7\n");
		return(7);
	}*/
	
	/*r=scanf("%[^\n]s",v);
    if (r < 0)
	{
		printf("Error main7\n");
		return(7);
	}*/
	r=READSIGN(sf,&amos,Database);
	if (r != 0)
	{
		printf("READSIGN Error!\n");
		return(1);
	}
	free(sf);
	r=printf("Enter the path to the file you want to verify\nPress 'Enter' on readiness\n");
	if (r < 0)
	{
		printf("Error main6\n");
		return(6);
	}
	r = ENDLESS_STRING(v);
	if (r != 0)
	{
		printf("Error ENDLESS_STRING\n");
		return(7);
	}
	r=VERIFICATION(v,amos,Database);
	if (r != 0)
	{
		printf("VERIFICATION Error!\n");
		return(2);
	}
	free(v);
	return(0);
}
